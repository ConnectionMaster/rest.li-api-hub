<configuration>
  <jmxConfigurator />
  <conversionRule conversionWord="coloredLevel" converterClass="play.api.Logger$ColoredLevel" />

  <!-- Create appender only in prod mode (not QEI2) -->
  <if condition='!property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
    <appender name="CUSTOM" class="com.linkedin.monitoring.logging.ProxyAppender"></appender>
  </then></if>

  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{yyyy/MM/dd HH:mm:ss.SSS} %coloredLevel [%logger{5}] [%thread] [${com.linkedin.app.name}] [%X{requestId}] %msg%n%xException{5}</pattern>
    </encoder>
  </appender>

  <appender name="SERVICE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home}/logs/${com.linkedin.app.name}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- daily rollover -->
      <fileNamePattern>${application.home}/logs/${com.linkedin.app.name}.log.%d{yyyy-MM-dd}</fileNamePattern>
      <!-- keep 30 days' worth of history -->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy/MM/dd HH:mm:ss.SSS} %coloredLevel [%logger{5}] [%thread] [${com.linkedin.app.name}] [%X{requestId}] %msg%n%xException{full}</pattern>
    </encoder>
  </appender>

  <appender name="ASSEMBLY" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home}/logs/${com.linkedin.app.name}_assembly_timing.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- daily rollover -->
      <fileNamePattern>${application.home}/logs/${com.linkedin.app.name}_assembly_timing.%d{yyyy-MM-dd}.log</fileNamePattern>
      <!-- keep 30 days' worth of history -->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy/MM/dd HH:mm:ss.SSS} %coloredLevel [%logger{5}] [%thread] [${com.linkedin.app.name}] [%X{requestId}] %msg%n%xException{full}</pattern>
    </encoder>
  </appender>

  <appender name="CONTAINER" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home}/logs/${com.linkedin.app.name}.out</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- daily rollover -->
      <fileNamePattern>${application.home}/logs/${com.linkedin.app.name}.%d{yyyy-MM-dd}.out</fileNamePattern>
      <!-- keep 30 days' worth of history -->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>%d{yyyy/MM/dd HH:mm:ss.SSS} [%level] [%logger{5}] [%thread] [pn] [%X{requestId}] %msg%n%xException{full}</pattern>
    </encoder>
  </appender>

  <appender name="ENGINE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${application.home}/logs/engine_public_access.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- daily rollover -->
      <fileNamePattern>${application.home}/logs/engine_public_access.%d{yyyy-MM-dd}.log</fileNamePattern>
      <!-- keep 30 days' worth of history -->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder>
      <pattern>%X{remoteAddress} %X{clientIp} %X{identd} %X{userId} [%d{dd/MMM/yyyy:HH:mm:ss Z}] "%X{requestMethod} %X{requestURI} %X{requestVersion}" %X{statusCode} "%X{contentLength}" "%X{referer}" "%X{userAgent}" "%X{port}" "%thread" %X{processingTime}ms%n</pattern>
    </encoder>
  </appender>

  <logger name="standard" level="INFO" additivity="false">
    <appender-ref ref="CONTAINER" />
  </logger>

  <logger name="play" level="INFO" additivity="false">
    <appender-ref ref="CONTAINER" />
  </logger>

  <logger name="application" level="INFO" additivity="false">
    <appender-ref ref="SERVICE" />
    <!-- Enable console logging only in prod mode (not QEI2) -->
    <if condition='!property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CUSTOM" />
    </then></if>
    <!-- Enable console logging only in dev mode (QEI2) -->
    <if condition='property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CONSOLE"/>
    </then></if>
  </logger>

  <logger name="com.linkedin.d2.discovery.stores.zk.ZooKeeperEphemeralStore" level="WARN" additivity="false">
    <!-- Disable zookeeper warnings in dev mode -->
    <if condition='!property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="SERVICE"/>
    </then></if>
  </logger>

  <logger name="com.linkedin" level="INFO" additivity="false">
    <appender-ref ref="SERVICE" />
    <!-- Enable console logging only in prod mode (not QEI2) -->
    <if condition='!property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CUSTOM" />
    </then></if>
    <!-- Enable console logging only in dev mode (QEI2) -->
    <if condition='property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CONSOLE"/>
    </then></if>
  </logger>

  <logger name="assembly" level="INFO" additivity="false">
    <appender-ref ref="ASSEMBLY" />
    <!-- Enable console logging only in dev mode (QEI2) -->
    <if condition='property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CONSOLE"/>
    </then></if>
  </logger>

  <logger name="engine" level="INFO" additivity="false">
    <appender-ref ref="ENGINE" />
    <!-- Enable console logging only in dev mode (QEI2) -->
    <if condition='property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CONSOLE"/>
    </then></if>
  </logger>

  <root level="ERROR">
    <appender-ref ref="SERVICE"/>
    <!-- Enable console logging only in dev mode (QEI2) -->
    <if condition='property("com.linkedin.app.env").equalsIgnoreCase("QEI2")'><then>
      <appender-ref ref="CONSOLE"/>
    </then></if>
  </root>

</configuration>
